import os

from cs50 import SQL
from flask import Flask, flash, redirect, render_template, request, session

# Not needed for my project?
# from flask_session import Session
# from werkzeug.security import check_password_hash, generate_password_hash

# Probably will keep apology, but personalise it to the game / don't think I need the rest
from helpers import apology, login_required, lookup, usd

# Configure application
app = Flask(__name__)


# Configure session to use filesystem (instead of signed cookies) // 
app.config["SESSION_PERMANENT"] = False
app.config["SESSION_TYPE"] = "filesystem"
Session(app)

# Configure CS50 Library to use SQLite database
db = SQL("sqlite:///finance.db")


@app.after_request
def after_request(response):
    """Ensure responses aren't cached"""
    response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
    response.headers["Expires"] = 0
    response.headers["Pragma"] = "no-cache"
    return response


@app.route("/")
@login_required
def index():
    """Show portfolio of stocks"""

    # Variable for the current user ID
    user_id = session["user_id"]

    # Query the databse for user stock (GROUP BY symbol, SUM shares + using HAVING as per the instructions)
    rows = db.execute("""
        SELECT symbol, SUM(shares) as total_shares
        FROM transaction_log
        WHERE user_id = ?
        GROUP BY symbol
        HAVING total_shares > 0
    """, user_id)

    # Creating a list for the HTML
    records = []

    # Populate the records list
    for row in rows:
        # Extract values from the SELECT (transaction_log) query
        symbol = row["symbol"]
        shares = row["total_shares"]

        # Lookup() current stock data
        stock_data = lookup(symbol)

        # Extract stock name and price from the API result
        stock_name = stock_data["name"]
        stock_price = stock_data["price"]

        # Calculate total value of this record
        stock_total = shares * stock_price

        # Append a dictionary to the records list
        records.append({
            "symbol": symbol,
            "name": stock_name,
            "shares": shares,
            "price": stock_price,
            "total": stock_total
        })

    # Pull user's current cash list
    user_cash = db.execute("SELECT cash FROM users WHERE id = ?", user_id)

    # Get the cash value
    user_cash = user_cash[0]["cash"]

    # Calculate total value of stocks
    stock_total = 0
    for record in records:
        stock_total += record["total"]  # total value for this stock

    # Calculate grand total (cash + stock value)
    grand_total = user_cash + stock_total

    # Redirect to index.html, passing records, user_cash, grand_total
    return render_template("index.html", records=records, user_cash=user_cash, grand_total=grand_total)


@app.route("/buy", methods=["GET", "POST"])
@login_required
def buy():
    """Buy shares of stock"""

    # User reached route via POST (as by submitting a form via POST)
    if request.method == "POST":

        symbol = request.form.get("symbol")
        stock = lookup(symbol)

        # Ensure symbol was submitted
        if not symbol:
            return apology("must provide symbol", 403)

        if stock == None:
            return apology("invalid symbol", 400)

        # Save stock's info into variables
        name = stock["name"]
        price = stock["price"]
        symbol = stock["symbol"]

        shares_input = request.form.get("shares")

        # Check if shares_input is a string of digits (no decimal points)
        if not shares_input.isdigit():
            return apology("shares must be a positive integer", 400)

        shares = int(shares_input)

        if shares <= 0:
            return apology("shares must be positive", 400)

        # If all good, redirect to the homepage
        else:
            # Calculate the full price of the shares
            total_price = price * shares

            # Check if the user has enough money
            user_cash = db.execute(
                "SELECT cash FROM users WHERE id = ?", session["user_id"]
            )
            user_cash = user_cash[0]["cash"]

            if user_cash < total_price:
                return apology("not enough cash", 403)
            else:
                db.execute(
                    "UPDATE users SET cash = cash - ? WHERE id = ?", total_price, session["user_id"]
                )
                db.execute(
                    "INSERT INTO transaction_log (user_id, symbol, shares, price) VALUES (?, ?, ?, ?)",
                    session["user_id"], symbol, shares, price
                )
                flash("Bought!")
                return redirect("/")

    else:
        return render_template("buy.html")


@app.route("/history")
@login_required
def history():
    """Show history of transactions"""

    # Remember the current user's ID
    user_id = session["user_id"]

    # Query all rows from transaction_log where user_id = session user
    transactions = db.execute(
        "SELECT symbol, shares, price, time FROM transaction_log WHERE user_id = ? ORDER BY time ASC", user_id
    )

    return render_template("history.html", transactions=transactions)


@app.route("/login", methods=["GET", "POST"])
def login():
    """Log user in"""

    # Forget any user_id
    session.clear()

    # User reached route via POST (as by submitting a form via POST)
    if request.method == "POST":
        # Ensure username was submitted
        if not request.form.get("username"):
            return apology("must provide username", 403)

        # Ensure password was submitted
        elif not request.form.get("password"):
            return apology("must provide password", 403)

        # Query database for username
        rows = db.execute(
            "SELECT * FROM users WHERE username = ?", request.form.get("username")
        )

        # Ensure username exists and password is correct
        if len(rows) != 1 or not check_password_hash(
            rows[0]["hash"], request.form.get("password")
        ):
            return apology("invalid username and/or password", 403)

        # Remember which user has logged in
        session["user_id"] = rows[0]["id"]

        # Redirect user to home page
        return redirect("/")

    # User reached route via GET (as by clicking a link or via redirect)
    else:
        return render_template("login.html")


@app.route("/logout")
def logout():
    """Log user out"""

    # Forget any user_id
    session.clear()

    # Redirect user to login form
    return redirect("/")


@app.route("/quote", methods=["GET", "POST"])
@login_required
def quote():
    """Get stock quote."""

    # User reached route via POST (as by submitting a form via POST)
    if request.method == "POST":

        symbol = request.form.get("symbol")
        stock = lookup(symbol)

        # Ensure symbol was submitted
        if not symbol:
            return apology("must provide symbol", 400)

        if stock == None:
            return apology("invalid symbol", 400)

        # Save stock's info into variables and push them to the HTML / redirect user there
        name = stock["name"]
        price = stock["price"]
        symbol = stock["symbol"]

        return render_template("quoted.html", name=name, price=price, symbol=symbol)

    # User reached route via GET (as by clicking a link or via redirect)
    else:
        return render_template("quote.html")


@app.route("/register", methods=["GET", "POST"])
def register():
    """Register user"""

    # User reached route via POST (as by submitting a form via POST)
    if request.method == "POST":
        # Ensure username was submitted
        if not request.form.get("username"):
            return apology("must provide username", 400)

        # Ensure password was submitted
        elif not request.form.get("password"):
            return apology("must provide password", 400)

        # Ensure password confirmation was submitted
        elif not request.form.get("confirmation"):
            return apology("must provide password confirmation", 400)

        # Ensure username is not taken
        try:
            db.execute(
                "INSERT INTO users (username, hash) VALUES (?, ?)", request.form.get(
                    "username"), generate_password_hash(request.form.get("password"))
            )
        except (ValueError) as e:
            if "UNIQUE constraint failed" in str(e):
                print(f"Username is already taken: {e}")
                return apology("username is already in use, choose a different one", 400)

        # Ensure password confirmation matches inputted password
        if request.form.get("password") != request.form.get("confirmation"):
            return apology("password fields do not match", 400)

        # Inform the user that they have created an account successfully (it will auto-redirect to home page)
        flash("Account created!")
        return redirect("/")

    # User reached route via GET (as by clicking a link or via redirect)
    else:
        return render_template("register.html")


@app.route("/sell", methods=["GET", "POST"])
@login_required
def sell():
    """Sell shares of stock"""

    # Remember the logged user
    user_id = session["user_id"]

    # Query the databse for user stock (GROUP BY symbol, SUM shares + using HAVING as per the instructions)
    rows = db.execute("""
        SELECT symbol, SUM(shares) as total_shares
        FROM transaction_log
        WHERE user_id = ?
        GROUP BY symbol
        HAVING total_shares > 0
    """, user_id)

    # Creating a list for the HTML
    current_user_stock = []

    # Populate the records list
    for row in rows:
        # Extract values from the SELECT (transaction_log) query
        symbol = row["symbol"]
        shares = row["total_shares"]

        # Append a dictionary to the records list
        current_user_stock.append({
            "symbol": symbol,
            "shares": shares,
        })

    # User reached route via POST (as by submitting a form via POST)
    if request.method == "POST":

        # Get user's chosen symbol and shares from form
        chosen_symbol = request.form.get("symbol")
        chosen_shares = request.form.get("shares")

        # Trigger an apology if symbol is not provided
        if not chosen_symbol:
            return apology("must provide symbol", 400)

        # Trigger an apology if shares are not provided
        if not chosen_shares:
            return apology("must provide number of shares", 400)

        # Check if symbol exists in current_user_stock
        found = False
        user_shares = 0

        for stock in current_user_stock:
            if stock["symbol"] == chosen_symbol:
                found = True
                user_shares = stock["shares"]

        if not found:
            apology("You don't have that symbol", 400)

        # Check if user has enough shares
        if int(chosen_shares) > user_shares:
            return apology("Not enough shares", 400)

        # Covert shares str into int + Trigger apology if shares is not a positive integer
        shares = int(request.form.get("shares"))
        if shares <= 0:
            return apology("a number of shares must be positive", 400)

        # Since the user has that stock and enough shares they want to sell...
        # Pull current stock price per share
        symbol = request.form.get("symbol")
        stock = lookup(symbol)
        price = stock["price"]
        name = stock["name"]

        # Calculate total price for the amount of shares the user wants to sell
        total_price = shares * price

        # Negative value for shares insert into the transaction_log to add a negative record
        shares = shares * -1

        # Insert a negative record into the transaction_log to deduct the amount of shares of that symbol from that user using the current price
        db.execute(
            "INSERT INTO transaction_log (user_id, symbol, shares, price) VALUES (?, ?, ?, ?)",
            user_id, symbol, shares, price
        )

        # Add the total_price received from selling the stock to the user's balance
        db.execute(
            "UPDATE users SET cash = cash + ? WHERE id = ?", total_price, user_id
        )
        flash("Sold!")
        return redirect("/")

    else:
        return render_template("sell.html", current_user_stock=current_user_stock)


@app.route("/account", methods=["GET", "POST"])
@login_required
def account():
    """Change password on the Account Page"""

    # If page reached by submitting the form
    if request.method == "POST":

        # Validate password inputs is not empty
        if not request.form.get("current_password"):
            return apology("please provide current password", 403)

        if not request.form.get("password"):
            return apology("please provide password", 403)

        if not request.form.get("confirmation"):
            return apology("please retype password", 403)

        # Query database for username
        rows = db.execute(
            "SELECT hash FROM users WHERE id = ?", session["user_id"]
        )

        # Ensure the current password is correct
        if not check_password_hash(
            rows[0]["hash"], request.form.get("current_password")
        ):
            return apology("invalid current assword", 403)

        # Validate that password inputs match
        if request.form.get("password") != request.form.get("confirmation"):
            return apology("passwords do not match", 403)

        else:
            db.execute(
                "UPDATE users SET hash = ? WHERE id = ?", generate_password_hash(
                    request.form.get("password")), session["user_id"]
            )
            flash("Password changed!")
            return redirect("/")

    else:
        return render_template("account.html")
